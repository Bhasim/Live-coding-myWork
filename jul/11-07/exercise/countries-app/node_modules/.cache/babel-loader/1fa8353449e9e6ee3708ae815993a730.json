{"ast":null,"code":"var _jsxFileName = \"/home/andrej/Desktop/E11/live-coding/jul/11-07/exercise/countries-app/src/components/ByRegion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n/*\n- in ByRegion component:\n4) fetch the countries on load by their region using this URL https://restcountries.com/v3.1/region/{region}  give the {region} an initial value in a local state. \n    1. create a fetcher function \n            - accept a region parameter\n    2. useState hook - import it\n                     - use it\n                     - give it initial state\n    3. useEffect hook - import it\n                      - use it to fetch based on the region state\n\n5) save the received array of countries in a local state {countries} and make sure that the fetch happens only when {region} (in the local state) changes. \n  1. useState - import it\n              - use it once the data is fetched\n6) show each country in the array {countries} using the template component CountryCard\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetchCountriesByRegion = async region => {\n  const response = await fetch(`https://restcountries.com/v3.1/region/${region}`);\n  const data = await response.json(); // console.log(data);\n\n  return data;\n};\n\nexport default function ByRegion() {\n  _s();\n\n  const [countries, setCountries] = useState([]);\n  const [region, setRegion] = useState(\"Europe\");\n  useEffect(() => {\n    fetchCountriesByRegion(region).then(data => setCountries(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ByRegion\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ByRegion, \"h9ldm2aeW3CPUomy/gYobv5nXpY=\");\n\n_c = ByRegion;\n\nvar _c;\n\n$RefreshReg$(_c, \"ByRegion\");","map":{"version":3,"names":["React","useState","useEffect","fetchCountriesByRegion","region","response","fetch","data","json","ByRegion","countries","setCountries","setRegion","then"],"sources":["/home/andrej/Desktop/E11/live-coding/jul/11-07/exercise/countries-app/src/components/ByRegion.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n/*\n- in ByRegion component:\n4) fetch the countries on load by their region using this URL https://restcountries.com/v3.1/region/{region}  give the {region} an initial value in a local state. \n    1. create a fetcher function \n            - accept a region parameter\n    2. useState hook - import it\n                     - use it\n                     - give it initial state\n    3. useEffect hook - import it\n                      - use it to fetch based on the region state\n\n5) save the received array of countries in a local state {countries} and make sure that the fetch happens only when {region} (in the local state) changes. \n  1. useState - import it\n              - use it once the data is fetched\n6) show each country in the array {countries} using the template component CountryCard\n\n*/\n\nconst fetchCountriesByRegion = async (region) => {\n  const response = await fetch(\n    `https://restcountries.com/v3.1/region/${region}`\n  );\n  const data = await response.json();\n\n  // console.log(data);\n  return data;\n};\n\nexport default function ByRegion() {\n  const [countries, setCountries] = useState([]);\n  const [region, setRegion] = useState(\"Europe\");\n\n  useEffect(() => {\n    fetchCountriesByRegion(region).then((data) => setCountries(data));\n  }, []);\n\n  return <div>ByRegion</div>;\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,sBAAsB,GAAG,MAAOC,MAAP,IAAkB;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,yCAAwCF,MAAO,EADtB,CAA5B;EAGA,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAJ+C,CAM/C;;EACA,OAAOD,IAAP;AACD,CARD;;AAUA,eAAe,SAASE,QAAT,GAAoB;EAAA;;EACjC,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACG,MAAD,EAASQ,SAAT,IAAsBX,QAAQ,CAAC,QAAD,CAApC;EAEAC,SAAS,CAAC,MAAM;IACdC,sBAAsB,CAACC,MAAD,CAAtB,CAA+BS,IAA/B,CAAqCN,IAAD,IAAUI,YAAY,CAACJ,IAAD,CAA1D;EACD,CAFQ,EAEN,EAFM,CAAT;EAIA,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACD;;GATuBE,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}