{"ast":null,"code":"var _jsxFileName = \"/home/andrej/Desktop/E11/live-coding/jul/11-07/exercise/countries-app/src/components/ByRegion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // Components\n\nimport CountryCard from \"./CountryCard\";\n/*\n- in ByRegion component:\n4) fetch the countries on load by their region using this URL https://restcountries.com/v3.1/region/{region}  give the {region} an initial value in a local state. \n    1. create a fetcher function \n            - accept a region parameter\n    2. useState hook - import it\n                     - use it\n                     - give it initial state\n    3. useEffect hook - import it\n                      - use it to fetch based on the region state\n\n5) save the received array of countries in a local state {countries} and make sure that the fetch happens only when {region} (in the local state) changes. \n  1. useState - import it\n              - use it once the data is fetched\n6) show each country in the array {countries} using the template component CountryCard\n    1. import CountryCard\n    2. use it when mapping over the countries array\n*/\n\n/*\n7) give the user the ability to change the region to one of the following: \n   (Africa, Americas, Asia, Europe, Oceania) by\n    using input type radio which should change the region in the\n    local state (check the rad-list in App.js as a reference for radio) \n\n  - we need to create 5 inputs with the type of radio\n  - add an onChange event listener to every input radio\n  - create a function which will be called whenever the user clicks on a radio input\n  - this function, it should set the region state(setRegion) to the value of the input\n\n8) add a form that has an input field (type text) and a button, save the user input in a local state then use it to fetch a country by name onSubmit using this URL https://restcountries.com/v3.1/name/{name}\n    - add a form with input and button inside of it\n    - save the user input in local state - \n                      1. create local state\n                      2. add an event listener to the input and save it to the newly created state\n    - an event listener for the form - \n                      1. make an API call with the value of the input state -\n                                - create a fetcher function for fetching by country name\n9) save the received object of the searched country in a local state {country} then show it using the component searchResult\n\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst fetchCountriesByRegion = async region => {\n  const response = await fetch(`https://restcountries.com/v3.1/region/${region}`);\n  const data = await response.json();\n  return data;\n};\n\nconst fetchCountryByName = async name => {\n  const response = await fetch(`https://restcountries.com/v3.1/name/${name}`);\n  const data = await response.json();\n  return data;\n};\n\nconst regions = [\"Africa\", \"America\", \"Asia\", \"Europe\", \"Oceania\"];\nexport default function ByRegion() {\n  _s();\n\n  const [countries, setCountries] = useState([]);\n  const [region, setRegion] = useState(\"Europe\");\n  const [userInput, setUserInput] = useState(\"\");\n  useEffect(() => {\n    fetchCountriesByRegion(region).then(data => setCountries(data));\n  }, [region]);\n\n  const handleChange = e => {\n    setRegion(e.target.value);\n  };\n\n  const handleUserInput = e => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleUserInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), regions.map(reg => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"radio\",\n        value: reg,\n        name: \"regions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: reg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardsContainer\",\n      children: countries.map((country, i) => /*#__PURE__*/_jsxDEV(CountryCard, {\n        country: country\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ByRegion, \"EOjpmCzpQjeaWTmJcjxaGd1DeW0=\");\n\n_c = ByRegion;\n\nvar _c;\n\n$RefreshReg$(_c, \"ByRegion\");","map":{"version":3,"names":["React","useState","useEffect","CountryCard","fetchCountriesByRegion","region","response","fetch","data","json","fetchCountryByName","name","regions","ByRegion","countries","setCountries","setRegion","userInput","setUserInput","then","handleChange","e","target","value","handleUserInput","handleSubmit","preventDefault","map","reg","country","i"],"sources":["/home/andrej/Desktop/E11/live-coding/jul/11-07/exercise/countries-app/src/components/ByRegion.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// Components\nimport CountryCard from \"./CountryCard\";\n\n/*\n- in ByRegion component:\n4) fetch the countries on load by their region using this URL https://restcountries.com/v3.1/region/{region}  give the {region} an initial value in a local state. \n    1. create a fetcher function \n            - accept a region parameter\n    2. useState hook - import it\n                     - use it\n                     - give it initial state\n    3. useEffect hook - import it\n                      - use it to fetch based on the region state\n\n5) save the received array of countries in a local state {countries} and make sure that the fetch happens only when {region} (in the local state) changes. \n  1. useState - import it\n              - use it once the data is fetched\n6) show each country in the array {countries} using the template component CountryCard\n    1. import CountryCard\n    2. use it when mapping over the countries array\n*/\n\n/*\n7) give the user the ability to change the region to one of the following: \n   (Africa, Americas, Asia, Europe, Oceania) by\n    using input type radio which should change the region in the\n    local state (check the rad-list in App.js as a reference for radio) \n\n  - we need to create 5 inputs with the type of radio\n  - add an onChange event listener to every input radio\n  - create a function which will be called whenever the user clicks on a radio input\n  - this function, it should set the region state(setRegion) to the value of the input\n\n8) add a form that has an input field (type text) and a button, save the user input in a local state then use it to fetch a country by name onSubmit using this URL https://restcountries.com/v3.1/name/{name}\n    - add a form with input and button inside of it\n    - save the user input in local state - \n                      1. create local state\n                      2. add an event listener to the input and save it to the newly created state\n    - an event listener for the form - \n                      1. make an API call with the value of the input state -\n                                - create a fetcher function for fetching by country name\n9) save the received object of the searched country in a local state {country} then show it using the component searchResult\n\n\n*/\n\nconst fetchCountriesByRegion = async (region) => {\n  const response = await fetch(\n    `https://restcountries.com/v3.1/region/${region}`\n  );\n  const data = await response.json();\n  return data;\n};\n\nconst fetchCountryByName = async (name) => {\n  const response = await fetch(`https://restcountries.com/v3.1/name/${name}`);\n  const data = await response.json();\n  return data;\n};\n\nconst regions = [\"Africa\", \"America\", \"Asia\", \"Europe\", \"Oceania\"];\n\nexport default function ByRegion() {\n  const [countries, setCountries] = useState([]);\n  const [region, setRegion] = useState(\"Europe\");\n  const [userInput, setUserInput] = useState(\"\");\n\n  useEffect(() => {\n    fetchCountriesByRegion(region).then((data) => setCountries(data));\n  }, [region]);\n\n  const handleChange = (e) => {\n    setRegion(e.target.value);\n  };\n\n  const handleUserInput = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <input onChange={handleUserInput} type=\"text\" />{\" \"}\n          <button>Submit</button>\n        </div>\n      </form>\n      {regions.map((reg) => (\n        <>\n          <input\n            onChange={handleChange}\n            type=\"radio\"\n            value={reg}\n            name=\"regions\"\n          />\n          <label>{reg}</label>\n        </>\n      ))}\n\n      <div className=\"cardsContainer\">\n        {countries.map((country, i) => (\n          <CountryCard country={country} key={i} />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}