{"ast":null,"code":"var _jsxFileName = \"/home/andrej/Desktop/E11/live-coding/jul/11-07/exercise/countries-app/src/components/ByRegion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // Components\n\nimport CountryCard from \"./CountryCard\";\n/*\n- in ByRegion component:\n4) fetch the countries on load by their region using this URL https://restcountries.com/v3.1/region/{region}  give the {region} an initial value in a local state. \n    1. create a fetcher function \n            - accept a region parameter\n    2. useState hook - import it\n                     - use it\n                     - give it initial state\n    3. useEffect hook - import it\n                      - use it to fetch based on the region state\n\n5) save the received array of countries in a local state {countries} and make sure that the fetch happens only when {region} (in the local state) changes. \n  1. useState - import it\n              - use it once the data is fetched\n6) show each country in the array {countries} using the template component CountryCard\n    1. import CountryCard\n    2. use it when mapping over the countries array\n*/\n\n/*\n7) give the user the ability to change the region to one of the following: \n   (Africa, Americas, Asia, Europe, Oceania) by\n    using input type radio which should change the region in the\n    local state (check the rad-list in App.js as a reference for radio) \n\n  - we need to create 5 inputs with the type of radio\n  - add an onChange event listener to every input radio\n  - create a function which will be called whenever the user clicks on a radio input\n  - this function, it should set the region state(setRegion) to the value of the input\n\n8) add a form that has an input field (type text) and a button, save the user input in a local state then use it to fetch a country by name onSubmit using this URL https://restcountries.com/v3.1/name/{name}\n\n9) save the received object of the searched country in a local state {country} then show it using the component searchResult\n\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst fetchCountriesByRegion = async region => {\n  const response = await fetch(`https://restcountries.com/v3.1/region/${region}`);\n  const data = await response.json();\n  return data;\n};\n\nconst regions = [\"Africa\", \"America\", \"Asia\", \"Europe\", \"Oceania\"];\nexport default function ByRegion() {\n  _s();\n\n  const [countries, setCountries] = useState([]);\n  const [region, setRegion] = useState(\"Europe\");\n  useEffect(() => {\n    if (region === \"Europe\") {\n      return;\n    }\n\n    fetchCountriesByRegion(region).then(data => setCountries(data));\n  }, [region]);\n\n  const handleChange = e => {\n    setRegion(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [regions.map(reg => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"radio\",\n        value: reg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: reg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardsContainer\",\n      children: countries.map((country, i) => /*#__PURE__*/_jsxDEV(CountryCard, {\n        country: country\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ByRegion, \"h9ldm2aeW3CPUomy/gYobv5nXpY=\");\n\n_c = ByRegion;\n\nvar _c;\n\n$RefreshReg$(_c, \"ByRegion\");","map":{"version":3,"names":["React","useState","useEffect","CountryCard","fetchCountriesByRegion","region","response","fetch","data","json","regions","ByRegion","countries","setCountries","setRegion","then","handleChange","e","target","value","map","reg","country","i"],"sources":["/home/andrej/Desktop/E11/live-coding/jul/11-07/exercise/countries-app/src/components/ByRegion.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// Components\nimport CountryCard from \"./CountryCard\";\n\n/*\n- in ByRegion component:\n4) fetch the countries on load by their region using this URL https://restcountries.com/v3.1/region/{region}  give the {region} an initial value in a local state. \n    1. create a fetcher function \n            - accept a region parameter\n    2. useState hook - import it\n                     - use it\n                     - give it initial state\n    3. useEffect hook - import it\n                      - use it to fetch based on the region state\n\n5) save the received array of countries in a local state {countries} and make sure that the fetch happens only when {region} (in the local state) changes. \n  1. useState - import it\n              - use it once the data is fetched\n6) show each country in the array {countries} using the template component CountryCard\n    1. import CountryCard\n    2. use it when mapping over the countries array\n*/\n\n/*\n7) give the user the ability to change the region to one of the following: \n   (Africa, Americas, Asia, Europe, Oceania) by\n    using input type radio which should change the region in the\n    local state (check the rad-list in App.js as a reference for radio) \n\n  - we need to create 5 inputs with the type of radio\n  - add an onChange event listener to every input radio\n  - create a function which will be called whenever the user clicks on a radio input\n  - this function, it should set the region state(setRegion) to the value of the input\n\n8) add a form that has an input field (type text) and a button, save the user input in a local state then use it to fetch a country by name onSubmit using this URL https://restcountries.com/v3.1/name/{name}\n\n9) save the received object of the searched country in a local state {country} then show it using the component searchResult\n\n\n*/\n\nconst fetchCountriesByRegion = async (region) => {\n  const response = await fetch(\n    `https://restcountries.com/v3.1/region/${region}`\n  );\n  const data = await response.json();\n  return data;\n};\n\nconst regions = [\"Africa\", \"America\", \"Asia\", \"Europe\", \"Oceania\"];\n\nexport default function ByRegion() {\n  const [countries, setCountries] = useState([]);\n  const [region, setRegion] = useState(\"Europe\");\n\n  useEffect(() => {\n    if (region === \"Europe\") {\n      return;\n    }\n    fetchCountriesByRegion(region).then((data) => setCountries(data));\n  }, [region]);\n\n  const handleChange = (e) => {\n    setRegion(e.target.value);\n  };\n  return (\n    <div>\n      {regions.map((reg) => (\n        <>\n          <input onChange={handleChange} type=\"radio\" value={reg} />\n          <label>{reg}</label>\n        </>\n      ))}\n\n      <div className=\"cardsContainer\">\n        {countries.map((country, i) => (\n          <CountryCard country={country} key={i} />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA,MAAMC,sBAAsB,GAAG,MAAOC,MAAP,IAAkB;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,yCAAwCF,MAAO,EADtB,CAA5B;EAGA,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;EACA,OAAOD,IAAP;AACD,CAND;;AAQA,MAAME,OAAO,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,MAAtB,EAA8B,QAA9B,EAAwC,SAAxC,CAAhB;AAEA,eAAe,SAASC,QAAT,GAAoB;EAAA;;EACjC,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACI,MAAD,EAASS,SAAT,IAAsBb,QAAQ,CAAC,QAAD,CAApC;EAEAC,SAAS,CAAC,MAAM;IACd,IAAIG,MAAM,KAAK,QAAf,EAAyB;MACvB;IACD;;IACDD,sBAAsB,CAACC,MAAD,CAAtB,CAA+BU,IAA/B,CAAqCP,IAAD,IAAUK,YAAY,CAACL,IAAD,CAA1D;EACD,CALQ,EAKN,CAACH,MAAD,CALM,CAAT;;EAOA,MAAMW,YAAY,GAAIC,CAAD,IAAO;IAC1BH,SAAS,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;EACD,CAFD;;EAGA,oBACE;IAAA,WACGT,OAAO,CAACU,GAAR,CAAaC,GAAD,iBACX;MAAA,wBACE;QAAO,QAAQ,EAAEL,YAAjB;QAA+B,IAAI,EAAC,OAApC;QAA4C,KAAK,EAAEK;MAAnD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAQA;MAAR;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA,gBADD,CADH,eAQE;MAAK,SAAS,EAAC,gBAAf;MAAA,UACGT,SAAS,CAACQ,GAAV,CAAc,CAACE,OAAD,EAAUC,CAAV,kBACb,QAAC,WAAD;QAAa,OAAO,EAAED;MAAtB,GAAoCC,CAApC;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD;;GA9BuBZ,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}